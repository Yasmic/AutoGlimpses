[
  {
    "objectID": "C_Plus_Plus/basics_of_cpp.html",
    "href": "C_Plus_Plus/basics_of_cpp.html",
    "title": "Basics of c++",
    "section": "",
    "text": "A class template is prescription for creating a class in which one or more types or values are prameterized .\nLet us see how to define and declare class templates  template &lt;class T&gt;\n\ntemplate key word always begins both the definition and a declaration of a class template .\ntemplate key word is followed by list of user defined data type separated by comma\nand surrounded by the less than (&lt;) and greater than (&gt;) tokens.\nIn place of class key word typename could also be used as shown below template &lt;typename T&gt;\n\nBelow is the simple program to understand the template class\n#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class ValueType&gt;\nclass tempClass\n{\npublic:\ntempClass(){}\nvoid updateDataType(ValueType data);\n\n};\n\ntemplate &lt;class ValueType&gt;\nvoid tempClass &lt; ValueType&gt;::updateDataType(ValueType data)\n{\n cout &lt;&lt;\"data=\"&lt;&lt;data&lt;&lt;endl;\n}\nint main()\n{\n    tempClass&lt;int&gt; tempObject;\n    tempObject.updateDataType(5);\n\n    tempClass&lt;char&gt; tempObjectchar;\n    char value='a';\n    tempObject.updateDataType(value);\n    return 0;\n}\ntemplate class can also have nontype parameter ,mostly it will be constant template &lt;class T, int size&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class ValueType&gt;\nclass tempClass\n{\npublic:\ntempClass(){}\nvoid updateDataType(ValueType data);\n\n};\n\ntemplate &lt;class ValueType&gt;\nvoid tempClass &lt; ValueType&gt;::updateDataType(ValueType data)\n{\n cout &lt;&lt;\"data=\"&lt;&lt;data&lt;&lt;endl;\n}\nint main()\n{\n    tempClass&lt;int&gt; tempObject;\n    tempObject.updateDataType(5);\n\n    tempClass&lt;char&gt; tempObjectchar;\n    char value='a';\n    tempObject.updateDataType(value);\n    return 0;\n}"
  },
  {
    "objectID": "C_Plus_Plus/basics_of_cpp.html#class-templates",
    "href": "C_Plus_Plus/basics_of_cpp.html#class-templates",
    "title": "Basics of c++",
    "section": "",
    "text": "A class template is prescription for creating a class in which one or more types or values are prameterized .\nLet us see how to define and declare class templates  template &lt;class T&gt;\n\ntemplate key word always begins both the definition and a declaration of a class template .\ntemplate key word is followed by list of user defined data type separated by comma\nand surrounded by the less than (&lt;) and greater than (&gt;) tokens.\nIn place of class key word typename could also be used as shown below template &lt;typename T&gt;\n\nBelow is the simple program to understand the template class\n#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class ValueType&gt;\nclass tempClass\n{\npublic:\ntempClass(){}\nvoid updateDataType(ValueType data);\n\n};\n\ntemplate &lt;class ValueType&gt;\nvoid tempClass &lt; ValueType&gt;::updateDataType(ValueType data)\n{\n cout &lt;&lt;\"data=\"&lt;&lt;data&lt;&lt;endl;\n}\nint main()\n{\n    tempClass&lt;int&gt; tempObject;\n    tempObject.updateDataType(5);\n\n    tempClass&lt;char&gt; tempObjectchar;\n    char value='a';\n    tempObject.updateDataType(value);\n    return 0;\n}\ntemplate class can also have nontype parameter ,mostly it will be constant template &lt;class T, int size&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class ValueType&gt;\nclass tempClass\n{\npublic:\ntempClass(){}\nvoid updateDataType(ValueType data);\n\n};\n\ntemplate &lt;class ValueType&gt;\nvoid tempClass &lt; ValueType&gt;::updateDataType(ValueType data)\n{\n cout &lt;&lt;\"data=\"&lt;&lt;data&lt;&lt;endl;\n}\nint main()\n{\n    tempClass&lt;int&gt; tempObject;\n    tempObject.updateDataType(5);\n\n    tempClass&lt;char&gt; tempObjectchar;\n    char value='a';\n    tempObject.updateDataType(value);\n    return 0;\n}"
  },
  {
    "objectID": "C_Plus_Plus/basics_of_cpp.html#lambda-function",
    "href": "C_Plus_Plus/basics_of_cpp.html#lambda-function",
    "title": "Basics of c++",
    "section": "2 Lambda function",
    "text": "2 Lambda function\nFormat :\n[] () mutable throw() -&gt; int \n{\n    //lambda body\n} \n[] Lambda introducer also called capture clause  () Lambda declarator also called parameter list  mutable also known as mutable specification  exception specification return type lambda body\nCapture clause \n[] -lambda does not access enclosing scope [=] -captures everything by value  [&]-capture everything by reference [x,&y]-capture x by value and y by reference [&,z]-capture everything by reference,but z by value \nLambda function example \n int x=9;\n  auto add_one = [x] (const int value) \n    {\n        x=2;//Error \n\n         //x is captured by copy so the x value cannot be modified inside the lambda function \n        //in order to change/update the value of x add \"mutable keyword after parameter list \"\n        //or capture the x value by reference in the capture clause\n        return value + 1+x;\n    };\n  \n  //Method 1\n    auto add_one = [x] (const int value) mutable\n    {\n        x=2;\n        return value + 1+x;\n    };\n    cout&lt;&lt;(add_one(2))&lt;&lt;endl; //12\n\n     //Method 2\n    auto add_one = [&x] (const int value) \n    {\n        x=2;\n        return value + 1+x;\n    };\n    cout&lt;&lt;(add_one(2))&lt;&lt;endl;//12"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "This is about me"
  },
  {
    "objectID": "Autosar/index.html",
    "href": "Autosar/index.html",
    "title": "Autosar",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nDiagnostic communication manager\n\n\n\n\n\n\n\nBSW\n\n\n\n\nDCM\n\n\n\n\n\n\nAug 26, 2022\n\n\nYasmi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Auto Glimpses",
    "section": "",
    "text": "Home page Author: Yasmi"
  },
  {
    "objectID": "Notes/index.html",
    "href": "Notes/index.html",
    "title": "Notes",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nNotes\n\n\n\n\n\n\n\nNotes\n\n\n\n\nNotes\n\n\n\n\n\n\nAug 26, 2022\n\n\nYasmi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "C_Plus_Plus/index.html",
    "href": "C_Plus_Plus/index.html",
    "title": "C Plus Plus",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nBasics of c++\n\n\n\n\n\n\n\nBasics of c++\n\n\n\n\nBasics of c++\n\n\n\n\n\n\nAug 6, 2023\n\n\nYas Mi\n\n\n\n\n\n\nNo matching items"
  }
]